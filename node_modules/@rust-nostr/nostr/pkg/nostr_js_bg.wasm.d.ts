/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_eventbuilder_free(a: number): void;
export function eventbuilder_new(a: number, b: number, c: number, d: number, e: number): number;
export function eventbuilder_customCreatedAt(a: number, b: number): number;
export function eventbuilder_toEvent(a: number, b: number, c: number): void;
export function eventbuilder_toUnsignedEvent(a: number, b: number): number;
export function eventbuilder_toPowEvent(a: number, b: number, c: number, d: number): void;
export function eventbuilder_toUnsignedPowEvent(a: number, b: number, c: number): number;
export function eventbuilder_metadata(a: number): number;
export function eventbuilder_relayList(a: number, b: number): number;
export function eventbuilder_textNote(a: number, b: number, c: number, d: number): number;
export function eventbuilder_textNoteReply(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function eventbuilder_longFormTextNote(a: number, b: number, c: number, d: number): number;
export function eventbuilder_contactList(a: number, b: number): number;
export function eventbuilder_encryptedDirectMsg(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function eventbuilder_repost(a: number, b: number, c: number): number;
export function eventbuilder_delete(a: number, b: number, c: number, d: number): number;
export function eventbuilder_reaction(a: number, b: number, c: number): number;
export function eventbuilder_reactionExtended(a: number, b: number, c: number, d: number, e: number): number;
export function eventbuilder_channel(a: number): number;
export function eventbuilder_channelMetadata(a: number, b: number, c: number, d: number, e: number): void;
export function eventbuilder_channelMsg(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function eventbuilder_hideChannelMsg(a: number, b: number, c: number): number;
export function eventbuilder_muteChannelUser(a: number, b: number, c: number): number;
export function eventbuilder_auth(a: number, b: number, c: number, d: number, e: number): void;
export function eventbuilder_liveEvent(a: number): number;
export function eventbuilder_liveEventMsg(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): void;
export function eventbuilder_report(a: number, b: number, c: number, d: number): number;
export function eventbuilder_publicZapRequest(a: number): number;
export function eventbuilder_zapReceipt(a: number, b: number, c: number, d: number, e: number): number;
export function eventbuilder_defineBadge(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number): number;
export function eventbuilder_awardBadge(a: number, b: number, c: number, d: number): void;
export function eventbuilder_profileBadges(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function eventbuilder_jobRequest(a: number, b: number, c: number, d: number): void;
export function eventbuilder_jobResult(a: number, b: number, c: number, d: number, e: number): void;
export function eventbuilder_jobFeedback(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): number;
export function eventbuilder_fileMetadata(a: number, b: number, c: number): number;
export function eventbuilder_httpAuth(a: number): number;
export function eventbuilder_stallData(a: number): number;
export function eventbuilder_productData(a: number): number;
export function eventbuilder_giftWrapFromSeal(a: number, b: number, c: number, d: number): void;
export function eventbuilder_giftWrap(a: number, b: number, c: number, d: number, e: number): void;
export function eventbuilder_sealedDirect(a: number, b: number, c: number): number;
export function eventbuilder_muteList(a: number): number;
export function eventbuilder_pinnedNotes(a: number, b: number): number;
export function eventbuilder_bookmarks(a: number, b: number): void;
export function eventbuilder_communities(a: number, b: number): number;
export function eventbuilder_publicChats(a: number, b: number): number;
export function eventbuilder_blockedRelays(a: number, b: number): number;
export function eventbuilder_searchRelays(a: number, b: number): number;
export function eventbuilder_interests(a: number): number;
export function eventbuilder_emojis(a: number): number;
export function eventbuilder_followSets(a: number, b: number): number;
export function eventbuilder_relaySets(a: number, b: number): number;
export function eventbuilder_bookmarksSets(a: number, b: number): void;
export function eventbuilder_articlesCurationSets(a: number): number;
export function eventbuilder_videosCurationSets(a: number, b: number): number;
export function eventbuilder_emojiSets(a: number, b: number): number;
export function eventbuilder_label(a: number, b: number, c: number, d: number): number;
export function __wbg_eventid_free(a: number): void;
export function eventid_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number): number;
export function eventid_parse(a: number, b: number, c: number): void;
export function eventid_fromSlice(a: number, b: number, c: number): void;
export function eventid_fromHex(a: number, b: number, c: number): void;
export function eventid_fromBech32(a: number, b: number, c: number): void;
export function eventid_asBytes(a: number, b: number): void;
export function eventid_toHex(a: number, b: number): void;
export function eventid_toBech32(a: number, b: number): void;
export function __wbg_imagedimensions_free(a: number): void;
export function __wbg_get_imagedimensions_height(a: number): number;
export function __wbg_set_imagedimensions_height(a: number, b: number): void;
export function __wbg_tag_free(a: number): void;
export function tag_parse(a: number, b: number, c: number): void;
export function tag_event(a: number): number;
export function tag_public_key(a: number): number;
export function tag_is_reply(a: number): number;
export function tag_kind(a: number, b: number): void;
export function tag_asVec(a: number, b: number): void;
export function tag_toVec(a: number, b: number): void;
export function __wbg_unsignedevent_free(a: number): void;
export function unsignedevent_id(a: number): number;
export function unsignedevent_createdAt(a: number): number;
export function unsignedevent_tags(a: number, b: number): void;
export function unsignedevent_fromJson(a: number, b: number, c: number): void;
export function unsignedevent_asJson(a: number, b: number): void;
export function unsignedevent_sign(a: number, b: number, c: number): void;
export function unsignedevent_addSignature(a: number, b: number, c: number, d: number): void;
export function __wbg_event_free(a: number): void;
export function event_id(a: number): number;
export function event_createdAt(a: number): number;
export function event_kind(a: number): number;
export function event_tags(a: number, b: number): void;
export function event_content(a: number, b: number): void;
export function event_signature(a: number, b: number): void;
export function event_verify(a: number): number;
export function event_fromJson(a: number, b: number, c: number): void;
export function event_asJson(a: number, b: number): void;
export function __wbg_publickey_free(a: number): void;
export function publickey_parse(a: number, b: number, c: number): void;
export function publickey_fromHex(a: number, b: number, c: number): void;
export function publickey_fromBech32(a: number, b: number, c: number): void;
export function publickey_toHex(a: number, b: number): void;
export function publickey_toBech32(a: number, b: number): void;
export function __wbg_secretkey_free(a: number): void;
export function secretkey_parse(a: number, b: number, c: number): void;
export function secretkey_fromHex(a: number, b: number, c: number): void;
export function secretkey_fromBech32(a: number, b: number, c: number): void;
export function secretkey_toHex(a: number, b: number): void;
export function secretkey_toBech32(a: number, b: number): void;
export function secretkey_encrypt(a: number, b: number, c: number, d: number): void;
export function __wbg_keys_free(a: number): void;
export function keys_new(a: number): number;
export function keys_parse(a: number, b: number, c: number): void;
export function keys_fromPublicKey(a: number): number;
export function keys_generate(): number;
export function keys_vanity(a: number, b: number, c: number, d: number, e: number): void;
export function keys_fromMnemonic(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number): void;
export function keys_publicKey(a: number): number;
export function keys_secretKey(a: number, b: number): void;
export function __wbg_clientmessage_free(a: number): void;
export function clientmessage_event(a: number): number;
export function clientmessage_req(a: number, b: number, c: number, d: number): number;
export function clientmessage_count(a: number, b: number, c: number, d: number): number;
export function clientmessage_close(a: number, b: number): number;
export function clientmessage_auth(a: number): number;
export function clientmessage_fromJson(a: number, b: number, c: number): void;
export function clientmessage_asJson(a: number, b: number): void;
export function __wbg_relaymessage_free(a: number): void;
export function relaymessage_event(a: number, b: number, c: number): number;
export function relaymessage_notice(a: number, b: number): number;
export function relaymessage_closed(a: number, b: number, c: number, d: number): number;
export function relaymessage_eose(a: number, b: number): number;
export function relaymessage_ok(a: number, b: number, c: number, d: number): number;
export function relaymessage_auth(a: number, b: number): number;
export function relaymessage_count(a: number, b: number, c: number): number;
export function relaymessage_fromJson(a: number, b: number, c: number): void;
export function relaymessage_asJson(a: number, b: number): void;
export function __wbg_coordinate_free(a: number): void;
export function coordinate_new(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function coordinate_kind(a: number): number;
export function coordinate_publicKey(a: number): number;
export function coordinate_identifier(a: number, b: number): void;
export function coordinate_relays(a: number, b: number): void;
export function nip04Encrypt(a: number, b: number, c: number, d: number, e: number): void;
export function nip04Decrypt(a: number, b: number, c: number, d: number, e: number): void;
export function verifyNip05(a: number, b: number, c: number): number;
export function __wbg_nip07signer_free(a: number): void;
export function nip07signer_new(a: number): void;
export function nip07signer_getPublicKey(a: number): number;
export function nip07signer_signEvent(a: number, b: number): number;
export function nip07signer_nip04Encrypt(a: number, b: number, c: number, d: number): number;
export function nip07signer_nip04Decrypt(a: number, b: number, c: number, d: number): number;
export function nip07signer_nip44Encrypt(a: number, b: number, c: number, d: number): number;
export function nip07signer_nip44Decrypt(a: number, b: number, c: number, d: number): number;
export function __wbg_relayinformationdocument_free(a: number): void;
export function relayinformationdocument_new(): number;
export function relayinformationdocument_get(a: number, b: number): number;
export function relayinformationdocument_name(a: number, b: number): void;
export function relayinformationdocument_description(a: number, b: number): void;
export function relayinformationdocument_pubkey(a: number, b: number): void;
export function relayinformationdocument_contact(a: number, b: number): void;
export function relayinformationdocument_supported_nips(a: number, b: number): void;
export function relayinformationdocument_software(a: number, b: number): void;
export function relayinformationdocument_version(a: number, b: number): void;
export function __wbg_shippingcost_free(a: number): void;
export function shippingcost_id(a: number, b: number): void;
export function __wbg_shippingmethod_free(a: number): void;
export function shippingmethod_new(a: number, b: number, c: number): number;
export function shippingmethod_getShippingCost(a: number): number;
export function shippingmethod_name(a: number, b: number): void;
export function shippingmethod_regions(a: number, b: number): void;
export function __wbg_stalldata_free(a: number): void;
export function stalldata_new(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function stalldata_id(a: number, b: number): void;
export function stalldata_name(a: number, b: number): void;
export function stalldata_description(a: number, b: number): void;
export function stalldata_currency(a: number, b: number): void;
export function stalldata_shipping(a: number, b: number): void;
export function __wbg_productdata_free(a: number): void;
export function productdata_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): number;
export function productdata_id(a: number, b: number): void;
export function productdata_stallId(a: number, b: number): void;
export function productdata_name(a: number, b: number): void;
export function productdata_description(a: number, b: number): void;
export function productdata_images(a: number, b: number): void;
export function productdata_currency(a: number, b: number): void;
export function productdata_price(a: number): number;
export function productdata_quantity(a: number): number;
export function productdata_specs(a: number, b: number): void;
export function productdata_shipping(a: number, b: number): void;
export function productdata_categories(a: number, b: number): void;
export function __wbg_nip19event_free(a: number): void;
export function nip19event_new(a: number, b: number, c: number, d: number): number;
export function nip19event_fromBech32(a: number, b: number, c: number): void;
export function nip19event_fromNostrUri(a: number, b: number, c: number): void;
export function nip19event_toBech32(a: number, b: number): void;
export function nip19event_toNostrUri(a: number, b: number): void;
export function nip19event_eventId(a: number): number;
export function nip19event_author(a: number): number;
export function nip19event_relays(a: number, b: number): void;
export function __wbg_nip19profile_free(a: number): void;
export function nip19profile_new(a: number, b: number, c: number, d: number): void;
export function nip19profile_fromBech32(a: number, b: number, c: number): void;
export function nip19profile_fromNostrUri(a: number, b: number, c: number): void;
export function nip19profile_toBech32(a: number, b: number): void;
export function nip19profile_toNostrUri(a: number, b: number): void;
export function nip19profile_relays(a: number, b: number): void;
export function createDelegationTag(a: number, b: number, c: number, d: number, e: number): void;
export function validateDelegationTag(a: number, b: number, c: number, d: number, e: number): number;
export function signDelegation(a: number, b: number, c: number, d: number, e: number): void;
export function verifyDelegationSignature(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function nip44Encrypt(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function nip44Decrypt(a: number, b: number, c: number, d: number, e: number): void;
export function __wbg_nostrconnectmetadata_free(a: number): void;
export function nostrconnectmetadata_new(a: number, b: number): number;
export function nostrconnectmetadata_url(a: number, b: number, c: number, d: number): void;
export function nostrconnectmetadata_description(a: number, b: number, c: number): number;
export function nostrconnectmetadata_icons(a: number, b: number, c: number): number;
export function nostrconnectmetadata_as_json(a: number, b: number): void;
export function __wbg_nostrconnecturi_free(a: number): void;
export function nostrconnecturi_parse(a: number, b: number, c: number): void;
export function nostrconnecturi_asString(a: number, b: number): void;
export function __wbg_payinvoicerequestparams_free(a: number): void;
export function __wbg_get_payinvoicerequestparams_id(a: number, b: number): void;
export function __wbg_set_payinvoicerequestparams_id(a: number, b: number, c: number): void;
export function __wbg_get_payinvoicerequestparams_invoice(a: number, b: number): void;
export function __wbg_set_payinvoicerequestparams_invoice(a: number, b: number, c: number): void;
export function __wbg_multipayinvoicerequestparams_free(a: number): void;
export function __wbg_get_multipayinvoicerequestparams_invoices(a: number, b: number): void;
export function __wbg_set_multipayinvoicerequestparams_invoices(a: number, b: number, c: number): void;
export function __wbg_keysendtlvrecord_free(a: number): void;
export function __wbg_get_keysendtlvrecord_value(a: number, b: number): void;
export function __wbg_set_keysendtlvrecord_value(a: number, b: number, c: number): void;
export function __wbg_paykeysendrequestparams_free(a: number): void;
export function __wbg_get_paykeysendrequestparams_id(a: number, b: number): void;
export function __wbg_set_paykeysendrequestparams_id(a: number, b: number, c: number): void;
export function __wbg_get_paykeysendrequestparams_preimage(a: number, b: number): void;
export function __wbg_set_paykeysendrequestparams_preimage(a: number, b: number, c: number): void;
export function __wbg_get_paykeysendrequestparams_tlv_records(a: number, b: number): void;
export function __wbg_set_paykeysendrequestparams_tlv_records(a: number, b: number, c: number): void;
export function __wbg_multipaykeysendrequestparams_free(a: number): void;
export function __wbg_get_multipaykeysendrequestparams_keysends(a: number, b: number): void;
export function __wbg_set_multipaykeysendrequestparams_keysends(a: number, b: number, c: number): void;
export function __wbg_makeinvoicerequestparams_free(a: number): void;
export function __wbg_get_makeinvoicerequestparams_description(a: number, b: number): void;
export function __wbg_set_makeinvoicerequestparams_description(a: number, b: number, c: number): void;
export function __wbg_get_makeinvoicerequestparams_description_hash(a: number, b: number): void;
export function __wbg_set_makeinvoicerequestparams_description_hash(a: number, b: number, c: number): void;
export function __wbg_lookupinvoicerequestparams_free(a: number): void;
export function __wbg_get_lookupinvoicerequestparams_payment_hash(a: number, b: number): void;
export function __wbg_set_lookupinvoicerequestparams_payment_hash(a: number, b: number, c: number): void;
export function __wbg_get_lookupinvoicerequestparams_invoice(a: number, b: number): void;
export function __wbg_set_lookupinvoicerequestparams_invoice(a: number, b: number, c: number): void;
export function __wbg_listtransactionsrequestparams_free(a: number): void;
export function __wbg_get_listtransactionsrequestparams_from(a: number, b: number): void;
export function __wbg_set_listtransactionsrequestparams_from(a: number, b: number, c: number): void;
export function __wbg_get_listtransactionsrequestparams_until(a: number, b: number): void;
export function __wbg_set_listtransactionsrequestparams_until(a: number, b: number, c: number): void;
export function __wbg_get_listtransactionsrequestparams_limit(a: number, b: number): void;
export function __wbg_set_listtransactionsrequestparams_limit(a: number, b: number, c: number): void;
export function __wbg_get_listtransactionsrequestparams_offset(a: number, b: number): void;
export function __wbg_set_listtransactionsrequestparams_offset(a: number, b: number, c: number): void;
export function __wbg_get_listtransactionsrequestparams_unpaid(a: number): number;
export function __wbg_set_listtransactionsrequestparams_unpaid(a: number, b: number): void;
export function __wbg_get_listtransactionsrequestparams_transaction_type(a: number): number;
export function __wbg_set_listtransactionsrequestparams_transaction_type(a: number, b: number): void;
export function __wbg_payinvoiceresponseresult_free(a: number): void;
export function __wbg_lookupinvoiceresponseresult_free(a: number): void;
export function __wbg_get_lookupinvoiceresponseresult_transaction_type(a: number): number;
export function __wbg_set_lookupinvoiceresponseresult_transaction_type(a: number, b: number): void;
export function __wbg_get_lookupinvoiceresponseresult_invoice(a: number, b: number): void;
export function __wbg_set_lookupinvoiceresponseresult_invoice(a: number, b: number, c: number): void;
export function __wbg_get_lookupinvoiceresponseresult_description(a: number, b: number): void;
export function __wbg_set_lookupinvoiceresponseresult_description(a: number, b: number, c: number): void;
export function __wbg_get_lookupinvoiceresponseresult_description_hash(a: number, b: number): void;
export function __wbg_set_lookupinvoiceresponseresult_description_hash(a: number, b: number, c: number): void;
export function __wbg_get_lookupinvoiceresponseresult_preimage(a: number, b: number): void;
export function __wbg_set_lookupinvoiceresponseresult_preimage(a: number, b: number, c: number): void;
export function __wbg_get_lookupinvoiceresponseresult_payment_hash(a: number, b: number): void;
export function __wbg_set_lookupinvoiceresponseresult_payment_hash(a: number, b: number, c: number): void;
export function __wbg_get_lookupinvoiceresponseresult_amount(a: number): number;
export function __wbg_set_lookupinvoiceresponseresult_amount(a: number, b: number): void;
export function __wbg_get_lookupinvoiceresponseresult_fees_paid(a: number): number;
export function __wbg_set_lookupinvoiceresponseresult_fees_paid(a: number, b: number): void;
export function __wbg_get_lookupinvoiceresponseresult_created_at(a: number): number;
export function __wbg_set_lookupinvoiceresponseresult_created_at(a: number, b: number): void;
export function __wbg_get_lookupinvoiceresponseresult_expires_at(a: number): number;
export function __wbg_set_lookupinvoiceresponseresult_expires_at(a: number, b: number): void;
export function __wbg_get_lookupinvoiceresponseresult_metadata(a: number, b: number): void;
export function __wbg_set_lookupinvoiceresponseresult_metadata(a: number, b: number, c: number): void;
export function __wbg_getbalanceresponseresult_free(a: number): void;
export function __wbg_get_getbalanceresponseresult_balance(a: number): number;
export function __wbg_set_getbalanceresponseresult_balance(a: number, b: number): void;
export function __wbg_getinforesponseresult_free(a: number): void;
export function __wbg_get_getinforesponseresult_pubkey(a: number, b: number): void;
export function __wbg_set_getinforesponseresult_pubkey(a: number, b: number, c: number): void;
export function __wbg_get_getinforesponseresult_network(a: number, b: number): void;
export function __wbg_set_getinforesponseresult_network(a: number, b: number, c: number): void;
export function __wbg_get_getinforesponseresult_block_height(a: number): number;
export function __wbg_set_getinforesponseresult_block_height(a: number, b: number): void;
export function __wbg_get_getinforesponseresult_block_hash(a: number, b: number): void;
export function __wbg_set_getinforesponseresult_block_hash(a: number, b: number, c: number): void;
export function __wbg_get_getinforesponseresult_methods(a: number, b: number): void;
export function __wbg_set_getinforesponseresult_methods(a: number, b: number, c: number): void;
export function __wbg_nostrwalletconnecturi_free(a: number): void;
export function nostrwalletconnecturi_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function nostrwalletconnecturi_parse(a: number, b: number, c: number): void;
export function nostrwalletconnecturi_publicKey(a: number): number;
export function nostrwalletconnecturi_relayUrl(a: number, b: number): void;
export function nostrwalletconnecturi_secret(a: number): number;
export function nostrwalletconnecturi_lud16(a: number, b: number): void;
export function nostrwalletconnecturi_asString(a: number, b: number): void;
export function __wbg_encryptedsecretkey_free(a: number): void;
export function encryptedsecretkey_new(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function encryptedsecretkey_fromBech32(a: number, b: number, c: number): void;
export function encryptedsecretkey_version(a: number): number;
export function encryptedsecretkey_keySecurity(a: number): number;
export function encryptedsecretkey_toSecretKey(a: number, b: number, c: number, d: number): void;
export function encryptedsecretkey_asSecretKey(a: number, b: number, c: number, d: number): void;
export function encryptedsecretkey_toBech32(a: number, b: number): void;
export function __wbg_mutelist_free(a: number): void;
export function __wbg_get_mutelist_public_keys(a: number, b: number): void;
export function __wbg_set_mutelist_public_keys(a: number, b: number, c: number): void;
export function __wbg_get_mutelist_hashtags(a: number, b: number): void;
export function __wbg_set_mutelist_hashtags(a: number, b: number, c: number): void;
export function __wbg_get_mutelist_event_ids(a: number, b: number): void;
export function __wbg_set_mutelist_event_ids(a: number, b: number, c: number): void;
export function __wbg_bookmarks_free(a: number): void;
export function __wbg_get_bookmarks_event_ids(a: number, b: number): void;
export function __wbg_set_bookmarks_event_ids(a: number, b: number, c: number): void;
export function __wbg_get_bookmarks_coordinate(a: number, b: number): void;
export function __wbg_set_bookmarks_coordinate(a: number, b: number, c: number): void;
export function __wbg_get_bookmarks_hashtags(a: number, b: number): void;
export function __wbg_set_bookmarks_hashtags(a: number, b: number, c: number): void;
export function __wbg_get_bookmarks_urls(a: number, b: number): void;
export function __wbg_set_bookmarks_urls(a: number, b: number, c: number): void;
export function __wbg_interests_free(a: number): void;
export function __wbg_get_interests_hashtags(a: number, b: number): void;
export function __wbg_set_interests_hashtags(a: number, b: number, c: number): void;
export function __wbg_emojis_free(a: number): void;
export function __wbg_get_emojis_emojis(a: number, b: number): void;
export function __wbg_set_emojis_emojis(a: number, b: number, c: number): void;
export function __wbg_articlescuration_free(a: number): void;
export function __wbg_get_articlescuration_coordinate(a: number, b: number): void;
export function __wbg_set_articlescuration_coordinate(a: number, b: number, c: number): void;
export function __wbg_get_articlescuration_event_ids(a: number, b: number): void;
export function __wbg_set_articlescuration_event_ids(a: number, b: number, c: number): void;
export function __wbg_image_free(a: number): void;
export function __wbg_get_image_url(a: number, b: number): void;
export function __wbg_set_image_url(a: number, b: number, c: number): void;
export function __wbg_get_image_dimensions(a: number): number;
export function __wbg_set_image_dimensions(a: number, b: number): void;
export function image_new(a: number, b: number, c: number): number;
export function __wbg_user_free(a: number): void;
export function __wbg_get_user_publicKey(a: number): number;
export function __wbg_set_user_publicKey(a: number, b: number): void;
export function user_new(a: number, b: number, c: number): number;
export function __wbg_liveeventstatus_free(a: number): void;
export function liveeventstatus_planned(): number;
export function liveeventstatus_live(): number;
export function liveeventstatus_ended(): number;
export function liveeventstatus_custom(a: number, b: number): number;
export function __wbg_liveeventhost_free(a: number): void;
export function liveeventhost_publicKey(a: number): number;
export function liveeventhost_relayUrl(a: number, b: number): void;
export function liveeventhost_proof(a: number, b: number): void;
export function __wbg_liveevent_free(a: number): void;
export function liveevent_id(a: number, b: number): void;
export function liveevent_title(a: number, b: number): void;
export function liveevent_summary(a: number, b: number): void;
export function liveevent_image(a: number): number;
export function liveevent_hashtags(a: number, b: number): void;
export function liveevent_streaming(a: number, b: number): void;
export function liveevent_recording(a: number, b: number): void;
export function liveevent_starts(a: number, b: number): void;
export function liveevent_ends(a: number, b: number): void;
export function liveevent_status(a: number): number;
export function liveevent_currentPartecipants(a: number, b: number): void;
export function liveevent_totalPartecipants(a: number, b: number): void;
export function liveevent_relays(a: number, b: number): void;
export function liveevent_host(a: number): number;
export function liveevent_speakers(a: number, b: number): void;
export function liveevent_participants(a: number, b: number): void;
export function __wbg_zaprequestdata_free(a: number): void;
export function zaprequestdata_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number): number;
export function zaprequestdata_publicKey(a: number): number;
export function zaprequestdata_relays(a: number, b: number): void;
export function zaprequestdata_message(a: number, b: number): void;
export function zaprequestdata_amount(a: number, b: number): void;
export function zaprequestdata_lnurl(a: number, b: number): void;
export function zaprequestdata_eventID(a: number): number;
export function zaprequestdata_eventCoordinate(a: number): number;
export function __wbg_unwrappedgift_free(a: number): void;
export function unwrappedgift_fromGiftWrap(a: number, b: number, c: number): void;
export function unwrappedgift_rumor(a: number): number;
export function __wbg_relaylistitem_free(a: number): void;
export function __wbg_get_relaylistitem_metadata(a: number): number;
export function __wbg_set_relaylistitem_metadata(a: number, b: number): void;
export function relaylistitem_new(a: number, b: number, c: number): number;
export function extractRelayList(a: number, b: number): void;
export function __wbg_aes256gcm_free(a: number): void;
export function __wbg_get_aes256gcm_key(a: number, b: number): void;
export function __wbg_set_aes256gcm_key(a: number, b: number, c: number): void;
export function __wbg_get_aes256gcm_iv(a: number, b: number): void;
export function __wbg_set_aes256gcm_iv(a: number, b: number, c: number): void;
export function aes256gcm_new(a: number, b: number, c: number, d: number): number;
export function __wbg_filemetadata_free(a: number): void;
export function filemetadata_new(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function filemetadata_urls(a: number, b: number): void;
export function filemetadata_mimeType(a: number, b: number): void;
export function filemetadata_hash(a: number, b: number): void;
export function filemetadata_aes256Gcm(a: number): number;
export function filemetadata_size(a: number, b: number): void;
export function filemetadata_dim(a: number): number;
export function filemetadata_magnet(a: number, b: number): void;
export function filemetadata_blurhash(a: number, b: number): void;
export function __wbg_httpdata_free(a: number): void;
export function httpdata_new(a: number, b: number, c: number): number;
export function httpdata_urls(a: number, b: number): void;
export function httpdata_method(a: number): number;
export function httpdata_payload(a: number, b: number): void;
export function __wbg_contact_free(a: number): void;
export function contact_new(a: number, b: number, c: number, d: number, e: number): number;
export function __wbg_singlelettertag_free(a: number): void;
export function singlelettertag_lowercase(a: number): number;
export function singlelettertag_uppercase(a: number): number;
export function singlelettertag_isLowercase(a: number): number;
export function singlelettertag_isUppercase(a: number): number;
export function __wbg_subscriptionid_free(a: number): void;
export function subscriptionid_new(a: number, b: number): number;
export function subscriptionid_generate(): number;
export function subscriptionid_get(a: number, b: number): void;
export function __wbg_filter_free(a: number): void;
export function filter_new(): number;
export function filter_fromJson(a: number, b: number, c: number): void;
export function filter_asJson(a: number, b: number): void;
export function filter_id(a: number, b: number): number;
export function filter_ids(a: number, b: number, c: number): number;
export function filter_author(a: number, b: number): number;
export function filter_authors(a: number, b: number, c: number): number;
export function filter_kind(a: number, b: number): number;
export function filter_kinds(a: number, b: number, c: number): number;
export function filter_event(a: number, b: number): number;
export function filter_events(a: number, b: number, c: number): number;
export function filter_pubkey(a: number, b: number): number;
export function filter_pubkeys(a: number, b: number, c: number): number;
export function filter_hashtag(a: number, b: number, c: number): number;
export function filter_hashtags(a: number, b: number, c: number): number;
export function filter_reference(a: number, b: number, c: number): number;
export function filter_references(a: number, b: number, c: number): number;
export function filter_search(a: number, b: number, c: number): number;
export function filter_since(a: number, b: number): number;
export function filter_until(a: number, b: number): number;
export function filter_limit(a: number, b: number): number;
export function filter_customTag(a: number, b: number, c: number, d: number): number;
export function filter_removeCustomTag(a: number, b: number, c: number, d: number): number;
export function filter_matchEvent(a: number, b: number): number;
export function __wbg_metadata_free(a: number): void;
export function metadata_new(): number;
export function metadata_fromJson(a: number, b: number, c: number): void;
export function metadata_asJson(a: number, b: number): void;
export function metadata_name(a: number, b: number, c: number): number;
export function metadata_displayName(a: number, b: number, c: number): number;
export function metadata_about(a: number, b: number, c: number): number;
export function metadata_website(a: number, b: number, c: number, d: number): void;
export function metadata_picture(a: number, b: number, c: number, d: number): void;
export function metadata_banner(a: number, b: number, c: number, d: number): void;
export function metadata_nip05(a: number, b: number, c: number): number;
export function metadata_lud06(a: number, b: number, c: number): number;
export function metadata_lud16(a: number, b: number, c: number): number;
export function timestamp_now(): number;
export function timestamp_fromSecs(a: number): number;
export function timestamp_asSecs(a: number): number;
export function timestamp_toHumanDatetime(a: number, b: number): void;
export function start(): void;
export function __wbg_nostrlibrary_free(a: number): void;
export function nostrlibrary_new(): number;
export function nostrlibrary_gitHashVersion(a: number, b: number): void;
export function __wbg_get_paykeysendrequestparams_pubkey(a: number, b: number): void;
export function __wbg_get_paykeysendresponseresult_preimage(a: number, b: number): void;
export function __wbg_get_payinvoiceresponseresult_preimage(a: number, b: number): void;
export function __wbg_get_makeinvoiceresponseresult_invoice(a: number, b: number): void;
export function __wbg_get_makeinvoiceresponseresult_payment_hash(a: number, b: number): void;
export function __wbg_get_getinforesponseresult_alias(a: number, b: number): void;
export function __wbg_get_getinforesponseresult_color(a: number, b: number): void;
export function __wbg_get_thumbnails_url(a: number, b: number): void;
export function __wbg_get_relaylistitem_url(a: number, b: number): void;
export function __wbg_get_emojiinfo_shortcode(a: number, b: number): void;
export function __wbg_get_emojiinfo_url(a: number, b: number): void;
export function __wbg_get_keysendtlvrecord_tlv_type(a: number): number;
export function __wbg_get_paykeysendrequestparams_amount(a: number): number;
export function __wbg_get_makeinvoicerequestparams_amount(a: number): number;
export function __wbg_get_imagedimensions_width(a: number): number;
export function __wbg_set_thumbnails_dimensions(a: number, b: number): void;
export function __wbg_set_keysendtlvrecord_tlv_type(a: number, b: number): void;
export function __wbg_set_paykeysendrequestparams_amount(a: number, b: number): void;
export function __wbg_set_makeinvoicerequestparams_amount(a: number, b: number): void;
export function __wbg_set_imagedimensions_width(a: number, b: number): void;
export function __wbg_set_user_url(a: number, b: number, c: number): void;
export function __wbg_get_interests_coordinate(a: number, b: number): void;
export function __wbg_get_emojis_coordinate(a: number, b: number): void;
export function __wbg_get_mutelist_words(a: number, b: number): void;
export function __wbg_set_interests_coordinate(a: number, b: number, c: number): void;
export function __wbg_set_emojis_coordinate(a: number, b: number, c: number): void;
export function __wbg_set_paykeysendrequestparams_pubkey(a: number, b: number, c: number): void;
export function __wbg_set_paykeysendresponseresult_preimage(a: number, b: number, c: number): void;
export function __wbg_set_payinvoiceresponseresult_preimage(a: number, b: number, c: number): void;
export function __wbg_set_makeinvoiceresponseresult_invoice(a: number, b: number, c: number): void;
export function __wbg_set_makeinvoiceresponseresult_payment_hash(a: number, b: number, c: number): void;
export function __wbg_set_getinforesponseresult_alias(a: number, b: number, c: number): void;
export function __wbg_set_getinforesponseresult_color(a: number, b: number, c: number): void;
export function __wbg_set_thumbnails_url(a: number, b: number, c: number): void;
export function __wbg_set_relaylistitem_url(a: number, b: number, c: number): void;
export function __wbg_set_emojiinfo_shortcode(a: number, b: number, c: number): void;
export function __wbg_set_emojiinfo_url(a: number, b: number, c: number): void;
export function shippingmethod_id(a: number, b: number): void;
export function unsignedevent_content(a: number, b: number): void;
export function __wbg_set_payinvoicerequestparams_amount(a: number, b: number, c: number): void;
export function __wbg_set_makeinvoicerequestparams_expiry(a: number, b: number, c: number): void;
export function __wbg_set_lookupinvoiceresponseresult_settled_at(a: number, b: number, c: number): void;
export function __wbg_get_thumbnails_dimensions(a: number): number;
export function __wbg_get_payinvoicerequestparams_amount(a: number, b: number): void;
export function __wbg_get_makeinvoicerequestparams_expiry(a: number, b: number): void;
export function __wbg_get_lookupinvoiceresponseresult_settled_at(a: number, b: number): void;
export function __wbg_set_mutelist_words(a: number, b: number, c: number): void;
export function __wbg_paykeysendresponseresult_free(a: number): void;
export function __wbg_get_user_url(a: number, b: number): void;
export function unsignedevent_kind(a: number): number;
export function unsignedevent_pubkey(a: number): number;
export function event_author(a: number): number;
export function unwrappedgift_sender(a: number): number;
export function shippingmethod_cost(a: number): number;
export function shippingcost_cost(a: number): number;
export function __wbg_makeinvoiceresponseresult_free(a: number): void;
export function __wbg_emojiinfo_free(a: number): void;
export function nip19profile_publicKey(a: number): number;
export function __wbg_timestamp_free(a: number): void;
export function __wbg_thumbnails_free(a: number): void;
export function thumbnails_new(a: number, b: number, c: number): number;
export function rustsecp256k1_v0_9_2_context_create(a: number): number;
export function rustsecp256k1_v0_9_2_context_destroy(a: number): void;
export function rustsecp256k1_v0_9_2_default_illegal_callback_fn(a: number, b: number): void;
export function rustsecp256k1_v0_9_2_default_error_callback_fn(a: number, b: number): void;
export function __wbindgen_export_0(a: number, b: number): number;
export function __wbindgen_export_1(a: number, b: number, c: number, d: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export function __wbindgen_export_3(a: number, b: number, c: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_export_4(a: number, b: number, c: number): void;
export function __wbindgen_export_5(a: number): void;
export function __wbindgen_export_6(a: number, b: number, c: number, d: number): void;
export function __wbindgen_start(): void;
